// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region ENUMS

enum Permissions {
  admin
  user
}

enum BoardTaskPriority {
  low
  medium
  high
}

enum BoardStatus {
  todo
  doing
  done
}

//#endregion

model User {
  id           String  @id @unique @default(nanoid(12))
  name         String
  email        String  @unique
  image        String?
  password     String
  refreshToken String?

  permissions UserPermission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Board     Board[]

  @@map("users")
}

model UserPermission {
  id         String      @id @unique @default(nanoid(12))
  permission Permissions
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userPermissions")
}

model Board {
  id                 String   @id @unique @default(nanoid(12))
  title              String
  description        String?
  userId             String
  dueDate            DateTime
  studyTimeInMinutes Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  BoardTask BoardTask[]

  @@map("boards")
}

model BoardTask {
  id                        String            @id @unique @default(nanoid(12))
  boardId                   String
  title                     String
  description               String
  averageStudyTimeInMinutes Int
  order                     Int               @default(0)
  priority                  BoardTaskPriority @default(low)
  status                    BoardStatus       @default(todo)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board            Board              @relation(fields: [boardId], references: [id], onDelete: Cascade)
  BoardTaskSubtask BoardTaskSubtask[]

  @@map("boardTasks")
}

model BoardTaskSubtask {
  id          String  @id @unique @default(nanoid(12))
  boardTaskId String
  title       String
  description String
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boardTask BoardTask @relation(fields: [boardTaskId], references: [id], onDelete: Cascade)

  @@map("boardTaskSubtasks")
}
